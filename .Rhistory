# Highcharter
hcmap("countries/in/in-all", name = "India") %>%
hc_add_series(data = highcharter.plot, type = "mapbubble",
name = "Job listing", maxSize = "25") %>%
hc_title(text = "Locations of Job Posting for Healthcare") %>%
hc_subtitle(text = "only top 100 locations are included, the calculation allowed multiple entries if the job is listed at multiple location") %>%
hc_tooltip(useHTML = TRUE,
headerFormat = "<table>",
pointFormat = paste("<tr><th colspan=\"1\">N Job Listing<td>{point.z}</td></th></tr>",
"<tr><th>Location Name</th><td>{point.name} </td></tr>",
"<tr><th>Pay Median</th><td>{point.Paymedian} </td></tr>",
"<tr><th>Pay Q1</th><td>{point.Q1} </td></tr>",
"<tr><th>Pay Q3</th><td>{point.Q3} </td></tr>"),
footerFormat = "</table>")
t.filtered.mdt<-mdt %>%
.[!is.na(m.payrate.Mean)&industry=="Medical / Healthcare / Hospitals"]
hcboxplot(x = t.filtered.mdt$m.payrate.Mean,
var = t.filtered.mdt$m.experience.Cut,
var2 = t.filtered.mdt$m.Education.factor,
outliers = FALSE) %>%
hc_chart(type = "column") %>%
hc_title(text = "Plot of Payrate(Mean, PA) vs Experience (Yrs) segregated on Education") %>%
hc_subtitle(text = "the extra series is allocated for job listing with no clear education requirement")
require(leaflet)
pal <- colorFactor("viridis", domain = unique(combined$industry))
pal <- colorFactor("viridis", domain = unique(individual_listing$industry))
# join mdt.melt.locaiont ( which duplicates for location ) with geocoded address(mydat)
combined<- mdt.melt.location[,if(.N>1000).SD, by=industry] %>%
.[,if(.N>200).N, by=.(industry, m.i.location)] %>%
.[mydat, on="m.i.location"] %>%
.[!is.na(industry)] %>%
.[lon>60&lon<90] %>%
.[lat>5&lat<30]%>%
droplevels(.)
list_industry<-unique(combined$industry)
individual_listing <- mdt.melt.location[, .(industry, m.i.location)] %>%
.[industry %in% list_industry] %>%
.[mydat, on="m.i.location"] %>%
.[!is.na(lon)|!is.na(lat)]%>%
.[lon>60&lon<90] %>%
.[lat>5&lat<30]%>%
droplevels(.)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
#overlay groups
addCircleMarkers(~lon, ~lat, popup=~industry,
data =individual_listing[industry=="IT-Software / Software Services"],
clusterOptions = T, group ="IT") %>%
addCircleMarkers(~lon, ~lat, popup=~industry,
data =individual_listing[industry=="Recruitment / Staffing"],
clusterOptions = T, group ="Recruit") %>%
addCircleMarkers(~lon, ~lat, popup=~industry,
data =individual_listing[industry=="Banking / Financial Services / Broking"],
clusterOptions = T, group ="Bank") %>%
addCircleMarkers(~lon, ~lat, popup=~industry,
data =individual_listing[industry==list_industry[[4]]],
clusterOptions = T, group ="Internet") %>%
addCircleMarkers(~lon, ~lat, popup=~industry,
data =individual_listing[industry==list_industry[[5]]],
clusterOptions = T, group ="Pharma") %>%
# Layers control
addLayersControl(
overlayGroups = c("IT", "Recruit", "Bank", "Internet", "Pharma"),
options = layersControlOptions(collapsed = FALSE)
)
pal <- colorFactor("viridis", domain = unique(individual_listing$industry))
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircleMarkers(lng = ~jitter(lon), lat = ~jitter(lat), weight = 10,
# radius = ~V1*10,
color = ~pal(industry),
stroke = FALSE, fillOpacity = 0.5,
popup = ~industry,
clusterOptions = markerClusterOptions()
)%>%
addLegend("bottomright", pal = pal, values = ~industry,
title = "Industry",
opacity = 1
)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircleMarkers(lng = ~jitter(lon), lat = ~jitter(lat), weight = 10,
# radius = ~V1*10,
color = ~pal(industry),
stroke = FALSE, fillOpacity = 0.5,
popup = ~industry,
# clusterOptions = markerClusterOptions()
)%>%
addLegend("bottomright", pal = pal, values = ~industry,
title = "Industry",
opacity = 1
)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircleMarkers(lng = ~jitter(lon), lat = ~jitter(lat), weight = 10,
# radius = ~V1*10,
color = ~pal(industry),
stroke = FALSE, fillOpacity = 0.5,
popup = ~industry
# clusterOptions = markerClusterOptions()
)%>%
addLegend("bottomright", pal = pal, values = ~industry,
title = "Industry",
opacity = 1
)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircleMarkers(lng = ~jitter(lon), lat = ~jitter(lat), weight = 10,
# radius = ~V1*10,
color = ~pal(industry),
stroke = FALSE, fillOpacity = 0.3,
popup = ~industry
# clusterOptions = markerClusterOptions()
)%>%
addLegend("bottomright", pal = pal, values = ~industry,
title = "Industry",
opacity = 1
)
leaflet(combined) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircles(lng = ~lon, lat = ~lat, weight = 10,
radius = ~N*10,
color = ~pal(industry),
popup = ~m.i.location
)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircles(lng = ~lon, lat = ~lat, weight = 10,
radius = ~N*10,
color = ~pal(industry),
popup = ~m.i.location
)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircles(lng = ~lon, lat = ~lat, weight = 10,
radius = ~N*10,
color = ~pal(industry),
popup = ~m.i.location
)%>%
addLegend("bottomright", pal = pal, values = ~industry,
title = "Industry",
opacity = 1
)
individual_listing
mdt.melt.location[, .(industry, m.i.location)] %>%
.[industry %in% list_industry]
mdt.melt.location[, .(industry, m.i.location)] %>%
.[industry %in% list_industry] %>%
.[mydat, on="m.i.location"]
mdt.melt.location[, .(industry, m.i.location)] %>%
.[industry %in% list_industry] %>%
.[,.N, by=c("industry", "m.i.location")]
mdt.melt.location[, .(industry, m.i.location)] %>%
.[industry %in% list_industry] %>%
.[,.N, by=c("industry", "m.i.location")]%>%
.[mydat, on="m.i.location"] %>%
.[!is.na(lon)|!is.na(lat)]%>%
.[lon>60&lon<90] %>%
.[lat>5&lat<30]%>%
droplevels(.)
leaflet(individual_listing) %>% addTiles() %>%
addProviderTiles(providers$CartoDB.Positron)%>%
addCircles(lng = ~lon, lat = ~lat, weight = 10,
radius = ~N*10,
color = ~pal(industry),
popup = ~m.i.location
)%>%
addLegend("bottomright", pal = pal, values = ~industry,
title = "Industry",
opacity = 1
)
require(tidyverse)
require(data.table)
require(lubridate)
require(stringr)
require(ggvis)
require(ggplot2)
require(forcats)
require(ggmap)
require(highcharter)
require(broom)
require(plotly)
#NLP
require(quanteda)
require(wordcloud)
require(slam)
#map
require(leaflet)
conversionRates <- as.data.table(read.csv(file="conversionRates.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
require(tidyverse)
require(data.table)
require(lubridate)
require(stringr)
require(ggvis)
require(ggplot2)
require(forcats)
require(ggmap)
require(highcharter)
require(broom)
require(plotly)
#NLP
require(quanteda)
require(wordcloud)
require(slam)
#map
require(leaflet)
conversionRates <- as.data.table(read.csv(file="conversionRates.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
getwd()
setwd("C:/Users/haotm/Desktop/kaggle/kaggle-naukri-jobs-database/")
conversionRates <- as.data.table(read.csv(file="conversionRates.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
setwd("C:/Users/haotm/Desktop/kaggle/kaggle-naukri-jobs-database")
conversionRates <- as.data.table(read.csv(file="conversionRates.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
list.files
list.files()
setwd("C:/Users/haotm/Desktop/kaggle/kaggle-naukri-jobs-database")
getwd()
setwd("C:\\Users\\haotm\\Desktop\\kaggle\\kaggle-naukri-jobs-database")
getwd()
setwd("C://Users//haotm//Desktop//kaggle//kaggle-naukri-jobs-database")
getwd()
setwd("C:/Users/haotm/Desktop/kaggle/kaggle-naukri-jobs-database")
require(tidyverse)
require(data.table)
require(lubridate)
require(stringr)
require(ggvis)
require(ggplot2)
require(forcats)
require(ggmap)
require(highcharter)
require(broom)
require(plotly)
#NLP
require(quanteda)
require(wordcloud)
require(slam)
#map
require(leaflet)
# setwd("C:/Users/haotm/Desktop/kaggle/kaggle-naukri-jobs-database")
conversionRates <- as.data.table(read.csv(file="conversionRates.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
require(tidyverse)
require(data.table)
require(lubridate)
require(stringr)
require(ggvis)
require(ggplot2)
require(forcats)
require(ggmap)
require(highcharter)
require(broom)
require(plotly)
#NLP
require(quanteda)
require(wordcloud)
require(slam)
#map
require(leaflet)
conversionRates <- as.data.table(read.csv(file="conversionRates.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
freeformResponses <- as.data.table(read.csv(file="freeformResponses.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
multipleChoiceResponses <- as.data.table(read.csv(file="multipleChoiceResponses.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = TRUE))
schema <- as.data.table(read.csv(file="schema.csv", strip.white = TRUE,
na.strings=c("","NA"),
stringsAsFactors = FALSE))
# t_gender_country <- multipleChoiceResponses %>%
#   .[,.N, by = c("GenderSelect","Country")]
# hchart(t_gender_country, "column", hcaes(x = Country, y = N, group =GenderSelect))
# Merging the records of country for China
# in the raw data, China can be recorded as "People 's Republic of China", "Republic of China"
multipleChoiceResponses<-multipleChoiceResponses[grep("China",Country), Country:= "China"]
# Dropping it from factors too
multipleChoiceResponses<-droplevels(multipleChoiceResponses)
# plotting
hchart(fct_infreq(multipleChoiceResponses$Country), "column")
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>"
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
style = list(color = "#90ed7d", useHTML = TRUE)) )
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
style = list(color = "#90ed7d", useHTML = TRUE))
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
style = list(color = "Black", useHTML = TRUE))
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "This is a title with <i>margin</i> and <b>Strong or bold text</b>",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_subtitle(text = "Countries with < 50 counts are aggregated into Other",
style = list(color = "Black", useHTML = TRUE))
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "Respondent's Country ",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_subtitle(text = "Countries with < 50 counts are aggregated into Other",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_xAxis(text = "Countries")
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "Respondent's Country ",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_subtitle(text = "Countries with < 50 counts are aggregated into Other",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_xAxis(text = "Countries", labels = list(rotation = 90))
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")
View(schema)
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = eval(schema[Column=="Tenure", Question]))
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = eval(schema[Column=="Tenure", Question]), eval(schema[Column=="Tenure", Asked]))
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste(eval(schema[Column=="Tenure", Question]), eval(schema[Column=="Tenure", Asked])))
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q>", eval(schema[Column=="Tenure", Question]), "["
eval(schema[Column=="Tenure", Asked]),"]"
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q", eval(schema[Column=="Tenure", Question]), "["
eval(schema[Column=="Tenure", Asked]),"]"
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q", eval(schema[Column=="Tenure", Question]), "/["
eval(schema[Column=="Tenure", Asked]),"/]"
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q", eval(schema[Column=="Tenure", Question]), "\["
paste("Q", eval(schema[Column=="Tenure", Question]), "\["
paste("Q", eval(schema[Column=="Tenure", Question]), "A"
eval(schema[Column=="Tenure", Asked]),"A"
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q", eval(schema[Column=="Tenure", Question]), "\[",
paste("Q", eval(schema[Column=="Tenure", Question]), "A",
eval(schema[Column=="Tenure", Asked]),"A"
)
paste("Q", eval(schema[Column=="Tenure", Question]), "[",
eval(schema[Column=="Tenure", Asked]),"A"
)
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q", eval(schema[Column=="Tenure", Question]), "[",
eval(schema[Column=="Tenure", Asked]),"]"
))
hchart(fct_infreq(multipleChoiceResponses$Tenure), "column")%>%
hc_title(text = "Tenure") %>%
hc_subtitle(text = paste("Q","[",eval(schema[Column=="Tenure", Asked]),"]",
eval(schema[Column=="Tenure", Question])
))
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "Respondent's Country ",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_subtitle(text = paste("Q","[",eval(schema[Column=="Tenure", Asked]),"]",
eval(schema[Column=="Tenure", Question]),
"<br>Countries with < 50 counts are aggregated into Other"),
style = list(color = "Black", useHTML = TRUE)) %>%
hc_xAxis(text = "Countries", labels = list(rotation = 90))
hchart(fct_infreq(multipleChoiceResponses$Country), "column") %>%
hc_title(text = "Respondent's Country ",
style = list(color = "Black", useHTML = TRUE)) %>%
hc_subtitle(text = paste("Q","[",eval(schema[Column=="Country", Asked]),"]",
eval(schema[Column=="Country", Question]),
"<br>Countries with < 50 counts are aggregated into Other"),
style = list(color = "Black", useHTML = TRUE)) %>%
hc_xAxis(text = "Countries", labels = list(rotation = 90))
AggrJobTitle<-multipleChoiceResponses%>%
.[!is.na(CurrentJobTitleSelect)&!CurrentJobTitleSelect=="Other",
.N,
by = CurrentJobTitleSelect] %>%
.[order(-N)]
hchart(fct_infreq(multipleChoiceResponses$CurrentJobTitleSelect), "column")
hchart(fct_infreq(multipleChoiceResponses$CurrentJobTitleSelect), "column")%>%
hc_title(text = "Job Title") %>%
hc_subtitle(text = paste("Q","[",eval(schema[Column=="CurrentJobTitleSelect", Asked]),"]",
eval(schema[Column=="CurrentJobTitleSelect", Question])
))
View(multipleChoiceResponses)
hchart(multipleChoiceResponses$Age, na.rm =T)%>%
hc_title(text = "Age") %>%
hc_subtitle(text = paste("Q","[",eval(schema[Column=="Age", Asked]),"]",
eval(schema[Column=="Age", Question])
))
multipleChoiceResponses$Coders
hchart(fct_infreq(multipleChoiceResponses$CodeWriter), "column")%>%
hc_title(text = "CodeWriter") %>%
hc_subtitle(text = paste("Q","[",eval(schema[Column=="CodeWriter", Asked]),"]",
eval(schema[Column=="CodeWriter", Question])
))
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter)] %>%
.[order(-N)]
hchart(t.WTF, type="column", hcaes(x = CurrentJobTitleSelect, y = N, group = CodeWriter))
hchart(t.WTF, type="column", hcaes(x = CurrentJobTitleSelect, y = N, group = CodeWriter)) %>%
hc_title(text = "Coders with relation to Job Title")
multipleChoiceResponses[!is.na(CurrentJobTitleSelect)] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(-N)]
multipleChoiceResponses[!is.na(CurrentJobTitleSelect)] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
multipleChoiceResponses$JobFactorTitle
multipleChoiceResponses$CurrentJobTitleSelect
multipleChoiceResponses%>%
[!is.na(CurrentJobTitleSelect) & CurrentJobTitleSelect=="Software Developer/Software Engineer"] %>%
multipleChoiceResponses[]%>%
[!is.na(CurrentJobTitleSelect) & CurrentJobTitleSelect=="Software Developer/Software Engineer"] %>%
multipleChoiceResponses[]%>%
.[!is.na(CurrentJobTitleSelect) & CurrentJobTitleSelect=="Software Developer/Software Engineer"] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
hchart(t.WTF, type="column", hcaes(x = Tenure, y = N, group = CodeWriter))
t.WTF<-multipleChoiceResponses[]%>%
.[!is.na(CurrentJobTitleSelect) & CurrentJobTitleSelect=="Software Developer/Software Engineer"] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
t.WTF
hchart(t.WTF, type="column", hcaes(x = Tenure, y = N, group = CodeWriter))
t.WTF<-multipleChoiceResponses[]%>%
.[!is.na(CurrentJobTitleSelect) & CurrentJobTitleSelect=="Business Analyst"] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
hchart(t.WTF, type="column", hcaes(x = Tenure, y = N, group = CodeWriter))
NonCodersTitle<-c("Software Developer/Software Engineer", "Business Analyst", "Programmer")
t.WTF<-multipleChoiceResponses[]%>%
.[!is.na(CurrentJobTitleSelect) & CurrentJobTitleSelect==NonCodersTitle[[1]]] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
t.WTF
NonCodersTitle[[1]]
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
.[CurrentJobTitleSelect %like% NonCodersTitle ] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
hchart(t.WTF, type="column", hcaes(x = Tenure, y = N, group = CodeWriter))
t.WTF
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, .N, by=.(CurrentJobTitleSelect, CodeWriter, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)] %>%
.[, Combined:=paste(CurrentJobTitleSelect, CodeWriter)]
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CodeWriter))
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect, CodeWriter)]%>%
.[, .N, by=.(Combined, Tenure)] %>%
.[order(CurrentJobTitleSelect, -N)]
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect, CodeWriter)]%>%
.[, .N, by=.(Combined, Tenure)] %>%
.[order(Combined, -N)]
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CodeWriter))
multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect, CodeWriter)]
.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect, CodeWriter)]%>%
.[, .N, by=.(Combined, CurrentJobTitleSelect, Tenure)] %>%
.[order(Combined, -N)]
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect, CodeWriter)]%>%
.[, .N, by=.(Combined, CurrentJobTitleSelect, Tenure)] %>%
.[order(Combined, -N)]
hchart(t.WTF, type="column", hcaes(x = CurrentJobTitleSelect, y = N, group = Combined))
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CurrentJobTitleSelect))
t.WTF
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CurrentJobTitleSelect))
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect, Tenure)]%>%
.[, .N, by=.(Combined, CurrentJobTitleSelect, CodeWriter)] %>%
.[order(Combined, -N)]
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CurrentJobTitleSelect))
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CodeWriter))
t.WTF<-multipleChoiceResponses[!is.na(CurrentJobTitleSelect)]%>%
# selecting only NoncodersTitle
.[CurrentJobTitleSelect %in% NonCodersTitle ] %>%
.[, Combined:=paste(CurrentJobTitleSelect,"-", Tenure)]%>%
.[, .N, by=.(Combined, CurrentJobTitleSelect, CodeWriter)] %>%
.[order(Combined, -N)]
hchart(t.WTF, type="column", hcaes(x = Combined, y = N, group = CodeWriter))
